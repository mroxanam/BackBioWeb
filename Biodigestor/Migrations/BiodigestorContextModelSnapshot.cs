// <auto-generated />
using System;
using Biodigestor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biodigestor.Migrations
{
    [DbContext(typeof(BiodigestorContext))]
    partial class BiodigestorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Biodigestor.Model.Cliente", b =>
                {
                    b.Property<int>("NumeroCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumeroCliente"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DNI")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NumeroCliente");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Biodigestor.Model.Domicilio", b =>
                {
                    b.Property<int>("NumeroMedidor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumeroMedidor"));

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Departamento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroCliente")
                        .HasColumnType("int");

                    b.Property<string>("Piso")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NumeroMedidor");

                    b.HasIndex("NumeroCliente");

                    b.ToTable("Domicilios");
                });

            modelBuilder.Entity("Biodigestor.Model.Factura", b =>
                {
                    b.Property<int>("NumeroFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumeroFactura"));

                    b.Property<decimal>("ConsumoMensual")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("ConsumoTotal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumeroCliente")
                        .HasColumnType("int");

                    b.Property<int>("NumeroMedidor")
                        .HasColumnType("int");

                    b.HasKey("NumeroFactura");

                    b.HasIndex("NumeroCliente");

                    b.HasIndex("NumeroMedidor");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Biodigestor.Models.Acumulador", b =>
                {
                    b.Property<int>("IdAcumulador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAcumulador"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InputGas")
                        .HasColumnType("int");

                    b.Property<int>("OutputGas")
                        .HasColumnType("int");

                    b.Property<double>("VolumenGas")
                        .HasColumnType("float");

                    b.HasKey("IdAcumulador");

                    b.ToTable("Acumuladores");
                });

            modelBuilder.Entity("Biodigestor.Models.Agitador", b =>
                {
                    b.Property<int>("IdAgitador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAgitador"));

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HoraApagadoAgitador")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraEncendidoAgitador")
                        .HasColumnType("time");

                    b.HasKey("IdAgitador");

                    b.ToTable("Agitadores");
                });

            modelBuilder.Entity("Biodigestor.Models.Alarma", b =>
                {
                    b.Property<int>("IdAlarma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAlarma"));

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraAlarma")
                        .HasColumnType("datetime2");

                    b.Property<string>("SensorAlarma")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAlarma");

                    b.ToTable("Alarmas");
                });

            modelBuilder.Entity("Biodigestor.Models.Alerta", b =>
                {
                    b.Property<int>("IdAlerta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAlerta"));

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraAlerta")
                        .HasColumnType("datetime2");

                    b.Property<string>("SensorAlerta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAlerta");

                    b.ToTable("Alertas");
                });

            modelBuilder.Entity("Biodigestor.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AcceptedTerms")
                        .HasColumnType("bit");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Biodigestor.Models.Biodigestor", b =>
                {
                    b.Property<int>("IdBiodigestor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBiodigestor"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdBiodigestor");

                    b.ToTable("BiodigestorEntities");
                });

            modelBuilder.Entity("Biodigestor.Models.Calentador", b =>
                {
                    b.Property<int>("IdCalentador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCalentador"));

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HoraApagadoCalentador")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraEncendidoCalentador")
                        .HasColumnType("time");

                    b.HasKey("IdCalentador");

                    b.ToTable("Calentadores");
                });

            modelBuilder.Entity("Biodigestor.Models.SensorHumedad", b =>
                {
                    b.Property<int>("IdSensorHumedad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSensorHumedad"));

                    b.Property<DateTime>("FechaHoraH")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBiodigestor")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorLecturaH")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("IdSensorHumedad");

                    b.HasIndex("IdBiodigestor");

                    b.ToTable("SensoresHumedad");
                });

            modelBuilder.Entity("Biodigestor.Models.SensorPresion", b =>
                {
                    b.Property<int>("IdSensorPresion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSensorPresion"));

                    b.Property<DateTime>("FechaHoraP")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBiodigestor")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorLecturaP")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("IdSensorPresion");

                    b.HasIndex("IdBiodigestor");

                    b.ToTable("SensoresPresion");
                });

            modelBuilder.Entity("Biodigestor.Models.SensorTemperatura", b =>
                {
                    b.Property<int>("IdValorLectura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValorLectura"));

                    b.Property<DateTime>("FechaHoraT")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBiodigestor")
                        .HasColumnType("int");

                    b.Property<decimal?>("ValorLecturaT")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("IdValorLectura");

                    b.HasIndex("IdBiodigestor");

                    b.ToTable("SensoresTemperatura");
                });

            modelBuilder.Entity("Biodigestor.Models.ValvulaAgua", b =>
                {
                    b.Property<int>("IdValvulaAgua")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValvulaAgua"));

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("VaHoraApertura")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("VaHoraCierre")
                        .HasColumnType("time");

                    b.HasKey("IdValvulaAgua");

                    b.ToTable("ValvulasAgua");
                });

            modelBuilder.Entity("Biodigestor.Models.ValvulaPresion", b =>
                {
                    b.Property<int>("IdValvulaPresion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValvulaPresion"));

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("VpHoraApertura")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("VpHoraCierre")
                        .HasColumnType("time");

                    b.HasKey("IdValvulaPresion");

                    b.ToTable("ValvulasPresion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Biodigestor.Model.Domicilio", b =>
                {
                    b.HasOne("Biodigestor.Model.Cliente", "Cliente")
                        .WithMany("Domicilios")
                        .HasForeignKey("NumeroCliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Biodigestor.Model.Factura", b =>
                {
                    b.HasOne("Biodigestor.Model.Cliente", "Cliente")
                        .WithMany("Facturas")
                        .HasForeignKey("NumeroCliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Biodigestor.Model.Domicilio", "Domicilio")
                        .WithMany("Facturas")
                        .HasForeignKey("NumeroMedidor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Domicilio");
                });

            modelBuilder.Entity("Biodigestor.Models.SensorHumedad", b =>
                {
                    b.HasOne("Biodigestor.Models.Biodigestor", null)
                        .WithMany()
                        .HasForeignKey("IdBiodigestor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biodigestor.Models.SensorPresion", b =>
                {
                    b.HasOne("Biodigestor.Models.Biodigestor", null)
                        .WithMany()
                        .HasForeignKey("IdBiodigestor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biodigestor.Models.SensorTemperatura", b =>
                {
                    b.HasOne("Biodigestor.Models.Biodigestor", "Biodigestor")
                        .WithMany("SensoresTemperatura")
                        .HasForeignKey("IdBiodigestor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Biodigestor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Biodigestor.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Biodigestor.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biodigestor.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Biodigestor.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biodigestor.Model.Cliente", b =>
                {
                    b.Navigation("Domicilios");

                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Biodigestor.Model.Domicilio", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Biodigestor.Models.Biodigestor", b =>
                {
                    b.Navigation("SensoresTemperatura");
                });
#pragma warning restore 612, 618
        }
    }
}
